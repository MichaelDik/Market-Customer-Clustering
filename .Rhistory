# ---------- Imports ----------
library(factoextra)
library(cluster)
library(ggplot2)
library(mclust)
library(pastecs)
# Descriptive Analysis
Market <- read.csv("market.csv")
# ---------- Pass numerical Data in separate Data Frame and scale ----------
ann_expenses_cols <- c("Fresh", "Milk", "Grocery", "Frozen", "Detergents_Paper",
"Delicassen")
unscaled_Market_ann_expenses <- Market[ann_expenses_cols]
Market_ann_expenses <- scale(unscaled_Market_ann_expenses)
# ---------- Extract statistical data ----------
statistics <- stat.desc(unscaled_Market_ann_expenses)
statistics <- statistics[ !( rownames(statistics) %in% c("nbr.val", "nbr.null", "nbr.na", "range", "SE.mean", "CI.mean.0.95", "coef.var")),]
rownames(statistics) <- c("Min", "Max", "Sum", "Median", "Mean", "Variance", "Standard Deviation")
capture.output(statistics,  file = "Descriptive Data.csv")
# Capture Correlation Table
capture.output(round(cor(unscaled_Market_ann_expenses), digits = 3), file = "Correlation Table.csv")
# Histograms (Example for Fresh, other histograms implemented in the same way)
# ggplot(unscaled_Market_ann_expenses, aes(x = Fresh)) +
# geom_histogram(aes(y=..density..), binwidth = 5000, colour = "black", fill = "#B98579") +
# geom_density(alpha = .2, fill = "black") +
# ggtitle("Fresh Distribution") + ylab("Frequency")
# Find outliers with Mahalanobis Distance
m_dist <- mahalanobis(unscaled_Market_ann_expenses, colMeans(unscaled_Market_ann_expenses), cov(unscaled_Market_ann_expenses))
# ---------- K-MEANS ALGORITHM ----------
# ---------- Find Optimal "k" ----------
set.seed(123)
# Elbow Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "wss")
# Silhouette Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "silhouette")
# Gap Statistic
# my_kmeans <- function(x, k) list(cluster = kmeans(x, k, iter.max = 20))
# gap_statistic <- clusGap(Market_ann_expenses, FUN = my_kmeans,
#                          K.max = 10, B = 100)
# fviz_gap_stat(gap_statistic) # Gap Statistic
# Run K-means Algorithm for k = 3
k3 <- kmeans(Market_ann_expenses, centers = 3, nstart = 25)
#fviz_cluster(k3, data = Market_ann_expenses)
# ---------- Cluster Quality ----------
# Unsupervised
ss <- silhouette(k3$cluster, dist(Market_ann_expenses))
average_silhouette_coefficient <- mean(ss[, 3])
sprintf("Average Silhouette Coefficient : %f ", average_silhouette_coefficient)
# Supervised
k3_cluster_similarity_vector <- as.vector(outer(k3$cluster, k3$cluster, "=="))
k3_class_similarity_vector <- as.vector(outer(Market$Region, Market$Region, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for k = 3: %f",
cor(k3_cluster_similarity_vector, k3_class_similarity_vector))
k2 <- kmeans(Market_ann_expenses, centers = 2, nstart = 25)
k2_cluster_similarity_vector <- as.vector(outer(k2$cluster, k2$cluster, "=="))
k2_class_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for k = 2: %f",
cor(k2_cluster_similarity_vector, k2_class_similarity_vector))
# ---------- Remove Outliers ----------
# 4.0783 is the IQ3 of Mahalanobis distance vector boxplot
outlier_rows <- which(m_dist > 4.0783)
Market <- Market[-outlier_rows,]
Market_ann_expenses <- Market_ann_expenses[-outlier_rows,]
# ---------- Find Optimal "k" ----------
# Elbow Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "wss")
# Silhouette Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "silhouette")
# Gap Statistic
# my_kmeans <- function(x, k) list(cluster = kmeans(x, k, iter.max = 20))
# gap_statistic <- clusGap(Market_ann_expenses, FUN = my_kmeans,
#                          K.max = 10, B = 100)
# fviz_gap_stat(gap_statistic) # Gap Statistic
# ---------- Cluster Quality ----------
k2 <- kmeans(Market_ann_expenses, centers = 2, nstart = 25)
# Unsupervised
ss <- silhouette(k2$cluster, dist(Market_ann_expenses))
average_silhouette_coefficient <- mean(ss[, 3])
sprintf("Average Silhouette Coefficient without Outliers for K-means and k = 2: %f ", average_silhouette_coefficient)
k2_cluster_similarity_vector <- as.vector(outer(k2$cluster, k2$cluster, "=="))
k2_class_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices without Outliers for K-means and k = 2: %f",
cor(k2_cluster_similarity_vector, k2_class_similarity_vector))
# ---------- HIERARCHICAL CLUSTERING ----------
# ---------- Calculate Distance Table ----------
distmatrix <- dist(Market_ann_expenses)
# ---------- Hierarchical Clustering ----------
# Run Single Linkage Method
hcs <- hclust(distmatrix, method = "single")
# plot(hcs, cex = 0.6, hang = -1, main = "Single Linkage Dendrogram")
# Run Complete Linkage Method
hcc <- hclust(distmatrix, method = "complete")
# plot(hcc, cex = 0.6, hang = -1, main = "Complete Linkage Dendrogram")
# Run Average Linkage Method
hca <- hclust(distmatrix, method = "average")
# plot(hca, cex = 0.6, hang = -1, main = "Average Linkage Dendrogram")
# Run Ward Method
hcw <- hclust(distmatrix, method = "ward.D2")
# plot(hcw, cex = 0.6, hang = -1, main = "Ward Dendrogram")
# fviz_nbclust(Market_ann_expenses, FUN = hcut, method = "wss", k.max = 30) + labs(title = "Elbow Method")
# fviz_nbclust(Market_ann_expenses, FUN = hcut, method = "silhouette", k.max = 30) + labs(title = "Silhouette Method")
# gap_stat <- clusGap(Market_ann_expenses, FUN = hcut, nstart = 25, K.max = 30, B = 50)
# fviz_gap_stat(gap_stat) + labs(title = "Gap Statistic")
sprintf("Single Linkage Agglomerative coefficient : %f", coef(hcs))
sprintf("Complete Linkage Agglomerative coefficient : %f", coef(hcc))
sprintf("Average Linkage Agglomerative coefficient : %f", coef(hca))
sprintf("Ward Method Agglomerative coefficient : %f", coef(hcw))
# ---------- Cluster Quality (with Ward Method) ----------
ward_cluster_2 <- cutree(hcw, k = 2)
ward_cluster_3 <- cutree(hcw, k = 3)
# Unsupervised
ss2 <- silhouette(ward_cluster_2, distmatrix)
average_silhouette_coefficient <- mean(ss2[, 3])
sprintf("Average Silhouette Coefficient for Ward Method and k = 2: %f ", average_silhouette_coefficient)
# Supervised
#   k == 2
ward_cluster_2_similarity_vector <- as.vector(outer(ward_cluster_2, ward_cluster_2, "=="))
ward_class_2_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Ward Method and k = 2: %f",
cor(ward_cluster_2_similarity_vector, ward_class_2_similarity_vector))
#   k == 3
ward_cluster_3_similarity_vector <- as.vector(outer(ward_cluster_3, ward_cluster_3, "=="))
ward_class_3_similarity_vector <- as.vector(outer(Market$Region, Market$Region, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Ward Method and k = 3: %f",
cor(ward_cluster_3_similarity_vector, ward_class_3_similarity_vector))
# ---------- MODEL-BASED CLUSTERING ----------
mc <- Mclust(Market_ann_expenses)
mc2 <- Mclust(Market_ann_expenses, 2, modelNames = "EEI")
mc3 <- Mclust(Market_ann_expenses, 3, modelNames = "EEI")
summary(mc)
summary(mc2)
summary(mc3)
# ---------- Clustering Quality ----------
ss2 <- silhouette(mc2$classification, distmatrix)
average_silhouette_coefficient <- mean(ss2[, 3])
sprintf("Average Silhouette Coefficient for Model-Based Clustering and k = 2: %f ", average_silhouette_coefficient)
# Supervised
#   k == 2
model_based_cluster_2_similarity_vector <- as.vector(outer(mc2$classification, mc2$classification, "=="))
model_based_class_2_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Model-Based Clustering and k = 2: %f",
cor(model_based_cluster_2_similarity_vector, model_based_class_2_similarity_vector))
#   k == 3
model_based_cluster_3_similarity_vector <- as.vector(outer(mc3$classification, mc3$classification, "=="))
model_based_class_3_similarity_vector <- as.vector(outer(Market$Region, Market$Region, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Model-Based Clustering and k = 3: %f",
cor(model_based_cluster_3_similarity_vector, model_based_class_3_similarity_vector))
# ---------- Imports ----------
library(factoextra)
library(cluster)
library(ggplot2)
library(mclust)
library(pastecs)
# Descriptive Analysis
Market <- read.csv("market.csv")
# ---------- Pass numerical Data in separate Data Frame and scale ----------
ann_expenses_cols <- c("Fresh", "Milk", "Grocery", "Frozen", "Detergents_Paper",
"Delicassen")
unscaled_Market_ann_expenses <- Market[ann_expenses_cols]
Market_ann_expenses <- scale(unscaled_Market_ann_expenses)
# ---------- Extract statistical data ----------
statistics <- stat.desc(unscaled_Market_ann_expenses)
statistics <- statistics[ !( rownames(statistics) %in% c("nbr.val", "nbr.null", "nbr.na", "range", "SE.mean", "CI.mean.0.95", "coef.var")),]
rownames(statistics) <- c("Min", "Max", "Sum", "Median", "Mean", "Variance", "Standard Deviation")
capture.output(statistics,  file = "Descriptive Data.csv")
# Capture Correlation Table
capture.output(round(cor(unscaled_Market_ann_expenses), digits = 3), file = "Correlation Table.csv")
# Histograms (Example for Fresh, other histograms implemented in the same way)
# ggplot(unscaled_Market_ann_expenses, aes(x = Fresh)) +
# geom_histogram(aes(y=..density..), binwidth = 5000, colour = "black", fill = "#B98579") +
# geom_density(alpha = .2, fill = "black") +
# ggtitle("Fresh Distribution") + ylab("Frequency")
# Find outliers with Mahalanobis Distance
m_dist <- mahalanobis(unscaled_Market_ann_expenses, colMeans(unscaled_Market_ann_expenses), cov(unscaled_Market_ann_expenses))
# ---------- K-MEANS ALGORITHM ----------
# ---------- Find Optimal "k" ----------
set.seed(123)
# Elbow Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "wss")
# Silhouette Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "silhouette")
# Gap Statistic
# my_kmeans <- function(x, k) list(cluster = kmeans(x, k, iter.max = 20))
# gap_statistic <- clusGap(Market_ann_expenses, FUN = my_kmeans,
#                          K.max = 10, B = 100)
# fviz_gap_stat(gap_statistic) # Gap Statistic
# Run K-means Algorithm for k = 3
k3 <- kmeans(Market_ann_expenses, centers = 3, nstart = 25)
#fviz_cluster(k3, data = Market_ann_expenses)
# ---------- Cluster Quality ----------
# Unsupervised
ss <- silhouette(k3$cluster, dist(Market_ann_expenses))
average_silhouette_coefficient <- mean(ss[, 3])
sprintf("Average Silhouette Coefficient : %f ", average_silhouette_coefficient)
# Supervised
k3_cluster_similarity_vector <- as.vector(outer(k3$cluster, k3$cluster, "=="))
k3_class_similarity_vector <- as.vector(outer(Market$Region, Market$Region, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for k = 3: %f",
cor(k3_cluster_similarity_vector, k3_class_similarity_vector))
k2 <- kmeans(Market_ann_expenses, centers = 2, nstart = 25)
k2_cluster_similarity_vector <- as.vector(outer(k2$cluster, k2$cluster, "=="))
k2_class_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for k = 2: %f",
cor(k2_cluster_similarity_vector, k2_class_similarity_vector))
# ---------- Remove Outliers ----------
# 4.0783 is the IQ3 of Mahalanobis distance vector boxplot
outlier_rows <- which(m_dist > 4.0783)
Market <- Market[-outlier_rows,]
Market_ann_expenses <- Market_ann_expenses[-outlier_rows,]
# ---------- Find Optimal "k" ----------
# Elbow Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "wss")
# Silhouette Method
# fviz_nbclust(Market_ann_expenses, kmeans, method = "silhouette")
# Gap Statistic
# my_kmeans <- function(x, k) list(cluster = kmeans(x, k, iter.max = 20))
# gap_statistic <- clusGap(Market_ann_expenses, FUN = my_kmeans,
#                          K.max = 10, B = 100)
# fviz_gap_stat(gap_statistic) # Gap Statistic
# ---------- Cluster Quality ----------
k2 <- kmeans(Market_ann_expenses, centers = 2, nstart = 25)
# Unsupervised
ss <- silhouette(k2$cluster, dist(Market_ann_expenses))
average_silhouette_coefficient <- mean(ss[, 3])
sprintf("Average Silhouette Coefficient without Outliers for K-means and k = 2: %f ", average_silhouette_coefficient)
k2_cluster_similarity_vector <- as.vector(outer(k2$cluster, k2$cluster, "=="))
k2_class_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices without Outliers for K-means and k = 2: %f",
cor(k2_cluster_similarity_vector, k2_class_similarity_vector))
# ---------- HIERARCHICAL CLUSTERING ----------
# ---------- Calculate Distance Table ----------
distmatrix <- dist(Market_ann_expenses)
# ---------- Hierarchical Clustering ----------
# Run Single Linkage Method
hcs <- hclust(distmatrix, method = "single")
# plot(hcs, cex = 0.6, hang = -1, main = "Single Linkage Dendrogram")
# Run Complete Linkage Method
hcc <- hclust(distmatrix, method = "complete")
# plot(hcc, cex = 0.6, hang = -1, main = "Complete Linkage Dendrogram")
# Run Average Linkage Method
hca <- hclust(distmatrix, method = "average")
# plot(hca, cex = 0.6, hang = -1, main = "Average Linkage Dendrogram")
# Run Ward Method
hcw <- hclust(distmatrix, method = "ward.D2")
# plot(hcw, cex = 0.6, hang = -1, main = "Ward Dendrogram")
# fviz_nbclust(Market_ann_expenses, FUN = hcut, method = "wss", k.max = 30) + labs(title = "Elbow Method")
# fviz_nbclust(Market_ann_expenses, FUN = hcut, method = "silhouette", k.max = 30) + labs(title = "Silhouette Method")
# gap_stat <- clusGap(Market_ann_expenses, FUN = hcut, nstart = 25, K.max = 30, B = 50)
# fviz_gap_stat(gap_stat) + labs(title = "Gap Statistic")
sprintf("Single Linkage Agglomerative coefficient : %f", coef(hcs))
sprintf("Complete Linkage Agglomerative coefficient : %f", coef(hcc))
sprintf("Average Linkage Agglomerative coefficient : %f", coef(hca))
sprintf("Ward Method Agglomerative coefficient : %f", coef(hcw))
# ---------- Cluster Quality (with Ward Method) ----------
ward_cluster_2 <- cutree(hcw, k = 2)
ward_cluster_3 <- cutree(hcw, k = 3)
# Unsupervised
ss2 <- silhouette(ward_cluster_2, distmatrix)
average_silhouette_coefficient <- mean(ss2[, 3])
sprintf("Average Silhouette Coefficient for Ward Method and k = 2: %f ", average_silhouette_coefficient)
# Supervised
#   k == 2
ward_cluster_2_similarity_vector <- as.vector(outer(ward_cluster_2, ward_cluster_2, "=="))
ward_class_2_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Ward Method and k = 2: %f",
cor(ward_cluster_2_similarity_vector, ward_class_2_similarity_vector))
#   k == 3
ward_cluster_3_similarity_vector <- as.vector(outer(ward_cluster_3, ward_cluster_3, "=="))
ward_class_3_similarity_vector <- as.vector(outer(Market$Region, Market$Region, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Ward Method and k = 3: %f",
cor(ward_cluster_3_similarity_vector, ward_class_3_similarity_vector))
# ---------- MODEL-BASED CLUSTERING ----------
mc <- Mclust(Market_ann_expenses)
mc2 <- Mclust(Market_ann_expenses, 2, modelNames = "EEI")
mc3 <- Mclust(Market_ann_expenses, 3, modelNames = "EEI")
summary(mc)
summary(mc2)
summary(mc3)
# ---------- Clustering Quality ----------
ss2 <- silhouette(mc2$classification, distmatrix)
average_silhouette_coefficient <- mean(ss2[, 3])
sprintf("Average Silhouette Coefficient for Model-Based Clustering and k = 2: %f ", average_silhouette_coefficient)
# Supervised
#   k == 2
model_based_cluster_2_similarity_vector <- as.vector(outer(mc2$classification, mc2$classification, "=="))
model_based_class_2_similarity_vector <- as.vector(outer(Market$Channel, Market$Channel, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Model-Based Clustering and k = 2: %f",
cor(model_based_cluster_2_similarity_vector, model_based_class_2_similarity_vector))
#   k == 3
model_based_cluster_3_similarity_vector <- as.vector(outer(mc3$classification, mc3$classification, "=="))
model_based_class_3_similarity_vector <- as.vector(outer(Market$Region, Market$Region, "=="))
sprintf("Correlation of cluster and class Similarity Matrices for Model-Based Clustering and k = 3: %f",
cor(model_based_cluster_3_similarity_vector, model_based_class_3_similarity_vector))
